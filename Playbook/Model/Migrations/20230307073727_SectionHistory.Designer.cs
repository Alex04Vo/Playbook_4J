// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configuration;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(PlaybookContext))]
    [Migration("20230307073727_SectionHistory")]
    partial class SectionHistory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entities.Abilities.Ability", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ABILITY_TYPE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.HasKey("Type");

                    b.ToTable("ABILITIES");
                });

            modelBuilder.Entity("Model.Entities.Authors.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.ToTable("AUTHORS");
                });

            modelBuilder.Entity("Model.Entities.Authors.Occupation", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<string>("OccupationType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OCCUPATION_TYPE");

                    b.HasKey("BookId", "AuthorId", "OccupationType");

                    b.HasIndex("AuthorId");

                    b.ToTable("BOOK_HAS_AUTHORS_JT");
                });

            modelBuilder.Entity("Model.Entities.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.ToTable("BOOKS");
                });

            modelBuilder.Entity("Model.Entities.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.Property<int>("CombatSkill")
                        .HasColumnType("int")
                        .HasColumnName("COMBAT_SKILL");

                    b.Property<int>("Endurance")
                        .HasColumnType("int")
                        .HasColumnName("ENDURANCE");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATURE_TYPE");

                    b.HasKey("Id");

                    b.ToTable("CREATURES");
                });

            modelBuilder.Entity("Model.Entities.Creatures.CreatureAbility", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.Property<string>("AbilityType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ABILITY_TYPE");

                    b.HasKey("CreatureId", "AbilityType");

                    b.HasIndex("AbilityType");

                    b.ToTable("CREATURE_HAS_ABILITIES_JT");
                });

            modelBuilder.Entity("Model.Entities.Effects.AbilityEffect", b =>
                {
                    b.Property<string>("AbilityType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ABILITY_TYPE");

                    b.Property<int>("EffectId")
                        .HasColumnType("int")
                        .HasColumnName("EFFECT_ID");

                    b.HasKey("AbilityType", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("ABILITY_HAS_EFFECTS_JT");
                });

            modelBuilder.Entity("Model.Entities.Effects.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EFFECT_ID");

                    b.HasKey("Id");

                    b.ToTable("EFFECTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Effects.ItemEffect", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<int>("EffectId")
                        .HasColumnType("int")
                        .HasColumnName("EFFECT_ID");

                    b.HasKey("ItemId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("ITEM_HAS_EFFECTS_JT");
                });

            modelBuilder.Entity("Model.Entities.Events.AEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EVENT_ID");

                    b.Property<int>("Ranking")
                        .HasColumnType("int")
                        .HasColumnName("RANKING");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("EVENTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Heroes.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HERO_ID");

                    b.Property<int>("CombatSkill")
                        .HasColumnType("int")
                        .HasColumnName("COMBAT_SKILL");

                    b.Property<int>("Endurance")
                        .HasColumnType("int")
                        .HasColumnName("ENDURANCE");

                    b.Property<string>("HeroLevelValue")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HERO_LEVEL");

                    b.Property<int>("HeroOwnershipId")
                        .HasColumnType("int")
                        .HasColumnName("HERO_OWNERSHIP_ID");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("INVENTORY_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SESSION_ID");

                    b.HasKey("Id");

                    b.HasIndex("HeroLevelValue");

                    b.HasIndex("HeroOwnershipId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("SessionId");

                    b.ToTable("HEROES");
                });

            modelBuilder.Entity("Model.Entities.Heroes.HeroOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HERO_OWNERSHIP_ID");

                    b.Property<int>("GoldCoins")
                        .HasColumnType("int")
                        .HasColumnName("GOLD_COINS");

                    b.Property<int>("Rations")
                        .HasColumnType("int")
                        .HasColumnName("RATIONS");

                    b.HasKey("Id");

                    b.ToTable("HERO_OWNERSHIPS");
                });

            modelBuilder.Entity("Model.Entities.Heroes.Inventories.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("INVENTORY_ID");

                    b.Property<string>("InventoryState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("INVENTORY_STATE");

                    b.HasKey("Id");

                    b.ToTable("INVENTORIES");
                });

            modelBuilder.Entity("Model.Entities.Heroes.Inventories.InventoryItem", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("INVENTORY_ID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.HasKey("InventoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("INVENTORY_HAS_ITEMS_JT");
                });

            modelBuilder.Entity("Model.Entities.Heroes.PlayerLevels.PlayerLevel", b =>
                {
                    b.Property<string>("Level")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PLAYER_LEVEL");

                    b.Property<int>("AbilityCount")
                        .HasColumnType("int")
                        .HasColumnName("ABILITY_COUNT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.HasKey("Level");

                    b.ToTable("PLAYER_LEVELS");
                });

            modelBuilder.Entity("Model.Entities.Items.AItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ITEM_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("WEIGHT");

                    b.HasKey("Id");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator<string>("ITEM_TYPE").HasValue("AItem");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.AOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OUTCOME_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CONTENT");

                    b.Property<int>("RootSectionId")
                        .HasColumnType("int")
                        .HasColumnName("ROOT_SECTION_ID");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("Id");

                    b.HasIndex("RootSectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("OUTCOMES_BT");
                });

            modelBuilder.Entity("Model.Entities.Regions.ARegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("REGION_ID");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AREA_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("RegionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("REGION_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("REGIONS_BT");
                });

            modelBuilder.Entity("Model.Entities.Sections.ASection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CONTENT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("SECTIONS_BT");
                });

            modelBuilder.Entity("Model.Entities.Sections.ImageDecorator", b =>
                {
                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("ImageUrl");

                    b.HasIndex("SectionId")
                        .IsUnique();

                    b.ToTable("IMAGE_DECORATORS");
                });

            modelBuilder.Entity("Model.Entities.Sessions.PlayedBook", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.HasKey("SessionId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("SESSION_HAS_BOOKS_JT");
                });

            modelBuilder.Entity("Model.Entities.Sessions.SectionHistory", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SESSION_ID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TIMESTAMP");

                    b.HasKey("SessionId", "BookId", "SectionId", "Timestamp");

                    b.HasIndex("SectionId");

                    b.ToTable("SB_HAS_SECTIONS_JT");
                });

            modelBuilder.Entity("Model.Entities.Sessions.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SESSION_ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("NAME");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SESSIONS");
                });

            modelBuilder.Entity("Model.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Model.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USER_ROLE_ID");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IDENTIFIER");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("USER_ROLES");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Simple User",
                            Identifier = "User"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Administrator",
                            Identifier = "Admin"
                        });
                });

            modelBuilder.Entity("Model.Entities.Users.UserRoleClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("USER_HAS_ROLES_JT");
                });

            modelBuilder.Entity("Model.Entities.Effects.ValueEffect", b =>
                {
                    b.HasBaseType("Model.Entities.Effects.Effect");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("AMOUNT");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("DURATION");

                    b.ToTable("VALUE_CHANGE_EFFECTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.CombatEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.HasIndex("CreatureId");

                    b.ToTable("COMBAT_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.DropAllWeaponEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.ToTable("DROP_ALL_WEAPONS_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.DropWeaponEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.ToTable("DROP_WEAPON_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.HasIndex("ItemId");

                    b.ToTable("ITEM_EVENTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.MissionAccomplishedEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.ToTable("MISSION_ACCOMPLISHED_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.MissionFailedEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.ToTable("MISSION_FAILED_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.StoryEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITLE");

                    b.ToTable("STORY_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.AEvent");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("AMOUNT");

                    b.ToTable("CHANGE_VALUE_EVENTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Items.SubItems.BackPack", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("BACK_PACK");
                });

            modelBuilder.Entity("Model.Entities.Items.SubItems.Key", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("KEY");
                });

            modelBuilder.Entity("Model.Entities.Items.SubItems.MagicalItem", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("MAGICAL_ITEM");
                });

            modelBuilder.Entity("Model.Entities.Items.SubItems.Potion", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("POTION");
                });

            modelBuilder.Entity("Model.Entities.Items.SubItems.Scroll", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("SCROLL");
                });

            modelBuilder.Entity("Model.Entities.Items.SubItems.Utility", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("UTILITY");
                });

            modelBuilder.Entity("Model.Entities.Items.SubItems.Weapon", b =>
                {
                    b.HasBaseType("Model.Entities.Items.AItem");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("WEAPON");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.AbilityOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.Outcomes.AOutcome");

                    b.Property<string>("AbilityType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ABILITY_TYPE");

                    b.HasIndex("AbilityType");

                    b.ToTable("ABILITY_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.DefaultOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.Outcomes.AOutcome");

                    b.ToTable("DEFAULT_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.GoldOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.Outcomes.AOutcome");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("AMOUNT");

                    b.ToTable("GOLD_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.ItemOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.Outcomes.AOutcome");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.HasIndex("ItemId");

                    b.ToTable("ITEM_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.MissionFailedOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.Outcomes.AOutcome");

                    b.ToTable("MISSION_FAILED_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.RandomOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.Outcomes.AOutcome");

                    b.Property<int>("Max")
                        .HasColumnType("int")
                        .HasColumnName("MAX");

                    b.Property<int>("Min")
                        .HasColumnType("int")
                        .HasColumnName("MIN");

                    b.ToTable("RANDOM_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Regions.Area", b =>
                {
                    b.HasBaseType("Model.Entities.Regions.ARegion");

                    b.ToTable("AREAS");
                });

            modelBuilder.Entity("Model.Entities.Regions.PointsOfInterest", b =>
                {
                    b.HasBaseType("Model.Entities.Regions.ARegion");

                    b.ToTable("POINTS_OF_INTEREST");
                });

            modelBuilder.Entity("Model.Entities.Sections.RuleSections.RuleSection", b =>
                {
                    b.HasBaseType("Model.Entities.Sections.ASection");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("SECTION_TYPE");

                    b.ToTable("RULE_SECTIONS");
                });

            modelBuilder.Entity("Model.Entities.Sections.StorySections.StorySection", b =>
                {
                    b.HasBaseType("Model.Entities.Sections.ASection");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("REGION_ID");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_NR");

                    b.HasIndex("RegionId");

                    b.ToTable("STORY_SECTIONS");
                });

            modelBuilder.Entity("Model.Entities.Effects.CombatSkillEffect", b =>
                {
                    b.HasBaseType("Model.Entities.Effects.ValueEffect");

                    b.ToTable("COMBAT_SKILL_CHANGE_EFFECTS");
                });

            modelBuilder.Entity("Model.Entities.Effects.EnduranceEffect", b =>
                {
                    b.HasBaseType("Model.Entities.Effects.ValueEffect");

                    b.ToTable("ENDURANCE_CHANGE_EFFECTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.AcquireItemEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent");

                    b.ToTable("ACQUIRE_ITEM_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.DropBackpackEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent");

                    b.ToTable("DROP_BACKPACK_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.DropItemEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent");

                    b.ToTable("DROP_ITEM_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.CombatSkillEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent");

                    b.ToTable("COMBAT_SKILL_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.CombatSkillTempChangeEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent");

                    b.ToTable("COMBAT_SKILL_TEMPORARY_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.EnduranceEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent");

                    b.ToTable("ENDURANCE_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.GoldAmountEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent");

                    b.ToTable("GOLD_AMOUNT_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.RationAmountEvent", b =>
                {
                    b.HasBaseType("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent");

                    b.ToTable("RATION_AMOUNT_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Authors.Occupation", b =>
                {
                    b.HasOne("Model.Entities.Authors.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Entities.Creatures.CreatureAbility", b =>
                {
                    b.HasOne("Model.Entities.Abilities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Creatures.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Model.Entities.Effects.AbilityEffect", b =>
                {
                    b.HasOne("Model.Entities.Abilities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Effects.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("Model.Entities.Effects.ItemEffect", b =>
                {
                    b.HasOne("Model.Entities.Effects.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Items.AItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Events.AEvent", b =>
                {
                    b.HasOne("Model.Entities.Sections.StorySections.StorySection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.Heroes.Hero", b =>
                {
                    b.HasOne("Model.Entities.Heroes.PlayerLevels.PlayerLevel", "HeroLevel")
                        .WithMany()
                        .HasForeignKey("HeroLevelValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Heroes.HeroOwnership", "HeroOwnership")
                        .WithMany()
                        .HasForeignKey("HeroOwnershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Heroes.Inventories.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Sessions.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeroLevel");

                    b.Navigation("HeroOwnership");

                    b.Navigation("Inventory");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Model.Entities.Heroes.Inventories.InventoryItem", b =>
                {
                    b.HasOne("Model.Entities.Heroes.Inventories.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Items.AItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.AOutcome", b =>
                {
                    b.HasOne("Model.Entities.Sections.StorySections.StorySection", "RootSection")
                        .WithMany("Outcomes")
                        .HasForeignKey("RootSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Sections.StorySections.StorySection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootSection");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.Regions.ARegion", b =>
                {
                    b.HasOne("Model.Entities.Regions.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Model.Entities.Sections.ASection", b =>
                {
                    b.HasOne("Model.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Entities.Sections.ImageDecorator", b =>
                {
                    b.HasOne("Model.Entities.Sections.ASection", "Section")
                        .WithOne()
                        .HasForeignKey("Model.Entities.Sections.ImageDecorator", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.Sessions.PlayedBook", b =>
                {
                    b.HasOne("Model.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Sessions.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Model.Entities.Sessions.SectionHistory", b =>
                {
                    b.HasOne("Model.Entities.Sections.ASection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Sessions.PlayedBook", "PlayedBook")
                        .WithMany()
                        .HasForeignKey("SessionId", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayedBook");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.Sessions.Session", b =>
                {
                    b.HasOne("Model.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.Users.UserRoleClaim", b =>
                {
                    b.HasOne("Model.Entities.Users.UserRole", "UserRole")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Users.User", "User")
                        .WithMany("RoleClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Model.Entities.Effects.ValueEffect", b =>
                {
                    b.HasOne("Model.Entities.Effects.Effect", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Effects.ValueEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.CombatEvent", b =>
                {
                    b.HasOne("Model.Entities.Creatures.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.CombatEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.DropAllWeaponEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.DropAllWeaponEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.DropWeaponEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.DropWeaponEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Items.AItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.MissionAccomplishedEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.MissionAccomplishedEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.MissionFailedEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.MissionFailedEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.StoryEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.StoryEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.AbilityOutcome", b =>
                {
                    b.HasOne("Model.Entities.Abilities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Outcomes.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Outcomes.SubOutcomes.AbilityOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.DefaultOutcome", b =>
                {
                    b.HasOne("Model.Entities.Outcomes.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Outcomes.SubOutcomes.DefaultOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.GoldOutcome", b =>
                {
                    b.HasOne("Model.Entities.Outcomes.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Outcomes.SubOutcomes.GoldOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.ItemOutcome", b =>
                {
                    b.HasOne("Model.Entities.Outcomes.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Outcomes.SubOutcomes.ItemOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Items.AItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.MissionFailedOutcome", b =>
                {
                    b.HasOne("Model.Entities.Outcomes.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Outcomes.SubOutcomes.MissionFailedOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Outcomes.SubOutcomes.RandomOutcome", b =>
                {
                    b.HasOne("Model.Entities.Outcomes.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Outcomes.SubOutcomes.RandomOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Regions.Area", b =>
                {
                    b.HasOne("Model.Entities.Regions.ARegion", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Regions.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Regions.PointsOfInterest", b =>
                {
                    b.HasOne("Model.Entities.Regions.ARegion", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Regions.PointsOfInterest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Sections.RuleSections.RuleSection", b =>
                {
                    b.HasOne("Model.Entities.Sections.ASection", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Sections.RuleSections.RuleSection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Sections.StorySections.StorySection", b =>
                {
                    b.HasOne("Model.Entities.Sections.ASection", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Sections.StorySections.StorySection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Regions.ARegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Model.Entities.Effects.CombatSkillEffect", b =>
                {
                    b.HasOne("Model.Entities.Effects.ValueEffect", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Effects.CombatSkillEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Effects.EnduranceEffect", b =>
                {
                    b.HasOne("Model.Entities.Effects.ValueEffect", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Effects.EnduranceEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.AcquireItemEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ItemEvents.AcquireItemEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.DropBackpackEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ItemEvents.DropBackpackEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ItemEvents.DropItemEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ItemEvents.AItemEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ItemEvents.DropItemEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.CombatSkillEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ValueEffects.CombatSkillEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.CombatSkillTempChangeEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ValueEffects.CombatSkillTempChangeEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.EnduranceEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ValueEffects.EnduranceEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.GoldAmountEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ValueEffects.GoldAmountEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Events.SubEvents.ValueEffects.RationAmountEvent", b =>
                {
                    b.HasOne("Model.Entities.Events.SubEvents.ValueEffects.AValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Events.SubEvents.ValueEffects.RationAmountEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Users.User", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("Model.Entities.Users.UserRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("Model.Entities.Sections.StorySections.StorySection", b =>
                {
                    b.Navigation("Outcomes");
                });
#pragma warning restore 612, 618
        }
    }
}
